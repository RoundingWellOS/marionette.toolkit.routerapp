{"version":3,"sources":["/source/marionette.toolkit.routerapp.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","Toolkit","RouterApp","_","Backbone","EventRouter","this","App","extend","constructor","configRoutes","router","routeTriggers","_routeTriggers","bindRouteEvents","listenTo","stop","apply","arguments","_eventRoutes","result","mapObject","val","key","list","route","channel","getChannel","each","action","event","partial","routeAction","eventArgs","tail","isRunning","start","triggerMethod","isFunction","startApp","appName","options","stopCurrent","app","getChildApp","setCurrent","_current","getCurrent","translateEvent","getDefaultRoute","translateRoute","drop","replaceRoute","url","history","navigate","trigger","replace","routerapp"],"mappings":"CAAC,SAAUA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,cAAeA,QAAQ,YAAaA,QAAQ,wBAAyBA,QAAQ,uBAAwBA,QAAQ,uBAC3L,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,aAAc,WAAY,uBAAwB,sBAAuB,sBAAuBJ,GACrJD,EAAOO,WAAWC,QAAQC,UAAYR,EAAQD,EAAOU,EAAGV,EAAOW,SAAUX,EAAOY,YAAaZ,EAAOO,WAAYP,EAAOQ,UACvHK,KAAM,SAAUH,EAAGC,EAAUC,EAAaL,EAAYC,GAAW,YAEjE,IAAIC,GAAYF,EAAWC,QAAQC,UAAYD,EAAQM,IAAIC,QACzDC,YAAa,WACXH,KAAKI,eAELJ,KAAKK,OAAS,GAAIL,MAAKD,aACrBO,cAAeN,KAAKO,iBAGtBP,KAAKQ,kBAGLR,KAAKS,SAAST,KAAKK,OAAQ,UAAWL,KAAKU,MAE3Cf,EAAQM,IAAIU,MAAMX,KAAMY,YAK1BR,aAAc,WACZJ,KAAKa,aAAehB,EAAEK,UAAWL,EAAEiB,OAAOd,KAAM,gBAEhDA,KAAKO,eAAiBV,EAAEkB,UAAUf,KAAKa,aAAc,SAASG,EAAKC,EAAKC,GACtE,MAAGF,GAAIG,MACEH,EAAIG,WAGbD,EAAKD,GAAO,SAMhBlB,YAAaD,EAASC,YAMtBS,gBAAiB,WACf,GAAIY,GAAUpB,KAAKK,OAAOgB,YAC1BxB,GAAEyB,KAAKtB,KAAKa,aAAc,SAASU,EAAQC,GAEtCD,EAAOA,SACRA,EAASA,EAAOA,QAElBvB,KAAKS,SAASW,EAASI,EAAO3B,EAAE4B,QAAQzB,KAAK0B,YAAaF,EAAOD,KAChEvB,OAML0B,YAAa,SAASF,EAAOD,GAC3B,GAAII,GAAY9B,EAAE+B,KAAKhB,UAAW,EAE9BZ,MAAK6B,aACP7B,KAAK8B,QAGP9B,KAAK+B,cAAa,eAAiBP,EAAOG,GAEtC9B,EAAEmC,WAAWT,KACfA,EAASvB,KAAKuB,IAGbA,GACDA,EAAOZ,MAAMX,KAAM2B,GAGrB3B,KAAK+B,cAAc,QAASP,EAAOG,IAIrCM,SAAU,SAASC,EAASC,GAC1BA,EAAUtC,EAAEK,UAAWL,EAAEiB,OAAOd,KAAM,gBAAiBmC,GAEvDnC,KAAKoC,aAEL,IAAIC,GAAMrC,KAAKsC,YAAYJ,GAASJ,MAAMK,EAI1C,OAFAnC,MAAKuC,WAAWF,GAETA,GAGTE,WAAY,SAASF,GACnBrC,KAAKwC,SAAWH,GAGlBI,WAAY,WACV,MAAOzC,MAAKwC,UAGdJ,YAAa,WAIX,MAHGpC,MAAKwC,UACNxC,KAAKwC,SAAS9B,OAETV,MAIT0C,eAAgB,SAASlB,GACvB,GAAIL,GAAQnB,KAAKK,OAAOsC,gBAAgBnB,EAExC,OAAOxB,MAAKK,OAAOuC,eAAezB,EAAOtB,EAAEgD,KAAKjC,UAAW,KAI7DkC,aAAc,WACZ,GAAIC,GAAM/C,KAAK0C,eAAe/B,MAAMX,KAAMY,UAE1Cd,GAASkD,QAAQC,SAASF,GAAOG,SAAS,EAAOC,SAAS,OAK1DC,EAAYxD,CAEhB,OAAOwD","file":"marionette.toolkit.routerapp.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone'), require('backbone.eventrouter'), require('backbone.marionette'), require('marionette.toolkit')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone', 'backbone.eventrouter', 'backbone.marionette', 'marionette.toolkit'], factory) :\n  global.Marionette.Toolkit.RouterApp = factory(global._, global.Backbone, global.EventRouter, global.Marionette, global.Toolkit)\n}(this, function (_, Backbone, EventRouter, Marionette, Toolkit) { 'use strict';\n\n  var RouterApp = Marionette.Toolkit.RouterApp = Toolkit.App.extend({\n    constructor: function() {\n      this.configRoutes();\n\n      this.router = new this.EventRouter({\n        routeTriggers: this._routeTriggers\n      });\n\n      this.bindRouteEvents();\n\n      // if the app does not handle a given route, stop\n      this.listenTo(this.router, 'noMatch', this.stop);\n\n      Toolkit.App.apply(this, arguments);\n    },\n\n    // attaches parentRoutes and childRoutes\n    // for each route in the hash creates a routeTriggers hash\n    configRoutes: function() {\n      this._eventRoutes = _.extend({}, _.result(this, 'eventRoutes'));\n\n      this._routeTriggers = _.mapObject(this._eventRoutes, function(val, key, list) {\n        if(val.route) {\n          return val.route;\n        }\n        // if no route is given this key is not a routeTrigger\n        list[key] = null;\n      });\n    },\n\n    // backbone.eventrouter\n    // override with custom eventrouter\n    EventRouter: Backbone.EventRouter,\n\n    // handle route events\n    // accepts a hash of 'some:event' : 'actionFunction'\n    // listens to the router channel and calls the appropriate\n    // action via the routeAction handler\n    bindRouteEvents: function() {\n      var channel = this.router.getChannel();\n      _.each(this._eventRoutes, function(action, event) {\n        //handle eventRoute definitions\n        if(action.action) {\n          action = action.action;\n        }\n        this.listenTo(channel, event, _.partial(this.routeAction, event, action));\n      }, this);\n    },\n\n    // applys the route's action\n    // starts this routerapp if necessary\n    // triggers before and after events\n    routeAction: function(event, action) {\n      var eventArgs = _.tail(arguments, 2);\n\n      if(!this.isRunning()) {\n        this.start();\n      }\n\n      this.triggerMethod(`before:route`, event, eventArgs);\n\n      if(!_.isFunction(action)) {\n        action = this[action];\n      }\n\n      if(action) {\n        action.apply(this, eventArgs);\n      }\n\n      this.triggerMethod('route', event, eventArgs);\n    },\n\n    // handler that ensures one running app per type\n    startApp: function(appName, options) {\n      options = _.extend({}, _.result(this, 'routeOptions'), options);\n\n      this.stopCurrent();\n\n      var app = this.getChildApp(appName).start(options);\n\n      this.setCurrent(app);\n\n      return app;\n    },\n\n    setCurrent: function(app){\n      this._current = app;\n    },\n\n    getCurrent: function() {\n      return this._current;\n    },\n\n    stopCurrent: function() {\n      if(this._current) {\n        this._current.stop();\n      }\n      return this;\n    },\n\n    // takes an event and translates data into the applicable url fragment\n    translateEvent: function(event) {\n      var route = this.router.getDefaultRoute(event);\n\n      return this.router.translateRoute(route, _.drop(arguments, 0));\n    },\n\n    // takes an event and changes the URL without triggering or adding to the history\n    replaceRoute: function() {\n      var url = this.translateEvent.apply(this, arguments);\n\n      Backbone.history.navigate(url, { trigger: false, replace: true });\n    }\n  });\n\n\n  var routerapp = RouterApp;\n\n  return routerapp;\n\n}));\n"],"sourceRoot":"/source/"}